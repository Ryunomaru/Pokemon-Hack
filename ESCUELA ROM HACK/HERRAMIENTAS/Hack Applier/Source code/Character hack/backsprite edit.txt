.thumb
.align 2

/*In order to switch the backsprite, we need some things set in stone:
1st - the original backsprites for the male and female characters cannot be
      moved around. They must remain at their original adresses.
2nd - as a consequence from the first, Do not mess with the first 8 pointers at 
      the 08234718 position
3rd - We need a table for the image pointers. the table will follow the format
      IIIIIIIIPPPPPPPP, where I = image pointer and P = new uncompressed pallete.
      The pallete will be individual for each entry in order to allow for greater
      flexibility on the picture's part.
4th - That table must start at index 0x1
*/

/*The following routine is way too big for the space at 0800762a, so we will
repoint it to another location
.hword 0x0000
Repointer:	ldr r1, new_code_loc
		bx r1
.hword 0x0000
new_code_loc: .word 0x00000000

Also known as
01 49 08 47 00 00 pointer

*/
/*To start off, we need to identify if the picture we're holding is one of the 
changing ones. also, we first need to complete the routine we switched out.*/
new_rot_start:	lsl r1, r4, #0x1
		add r1, r1, r4
		lsl r1, r1, #0x2
		add r2, r1, r6
		ldr r0, [r2]		/*this be where the pointer is loaded*/
		push {r2-r5}
		mov r2, #0x80
		ldr r1, first_male_back
		lsl r2, r2, #0x4
		mov r4, #0x0
compare_loop:	cmp r0, r1
		beq other_tag
		add r1, r1, r2
		add r4, #0x1
		cmp r4, #0x1A
		blt compare_loop
print_picture:	pop {r2-r5}
		lsl r1, r4, #0x1
		add r1, r1, r4
		lsl r1, r1, #0x2
		add r1, r1, r7
		ldr r1, [r1]
		ldrh r2, [r2, #8]
		lsr r2, r2, #0x1
		swi #0xb
		ldr r1, return_addr
		bx r1
.hword 0x0000
first_male_back: .word 0x08e69ebc
return_addr:	.word 0x08007641

other_tag:	cmp r4, #0xA
		blt FR_hero
		sub r4, #0xA
change_picture:	cmp r4, #0x4		
		blt all_maned
		sub r4, #0x4
		b change_picture
FR_hero:	cmp r4, #0x5		
		blt all_maned
		sub r4, #0x5
		b FR_hero
all_maned:	add r5, r0, #0x0
		ldr r0, var_4062
		bl call_var_load
		cmp r0, #0x0
		beq print_old_picture
		ldr r1, table_addr
		lsl r3 ,r0, #0x5	/*table entry number*/
		lsl r0, r0, #0x3
		add r0, r0, r3
		lsl r4, r4, #0x3	/*frame number*/
		add r4, r1, r4		/*table + frame*/
		add r4, r0, r4 		/*table + frame + entry */
		ldr r3, [r4]
		cmp r3, #0x0
		beq print_old_picture
		ldr r0, [r4, #0x4]
		ldr r1, first_pallette_slot
		mov r2, #0x10
		swi 0xb
		mov r4, #0xc0
		add r1, r1, r4
		swi 0xb 
		ldr r1, pallete_dump
		swi 0xb
		add r1, r1, r4
		swi 0xb
		add r0, r3, #0x0
		b print_picture
print_old_picture:	add r0, r5, #0x0
			b print_picture


call_var_load:	ldr r1, var_load
		bx r1
var_load:	.word 0x0806E569
var_4062: 	.word 0x00004062		
table_addr:	.word 0x081ab1d8/*081ab200 - 0x28, any table location - 0x28*/
first_pallette_slot:	.word 0x05000200
pallete_dump: .word 0x020377f8
/*02020754*/
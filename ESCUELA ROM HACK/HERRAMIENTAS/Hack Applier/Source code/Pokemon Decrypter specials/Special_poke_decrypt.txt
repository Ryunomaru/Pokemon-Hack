.align 2
.thumb

Start:		push {r1-r7, lr}
		ldr r7, new_store_addr
		ldr r6, [r7, #0x0]
		ldr r5, [r7, #0x4]
		orr r6, r5
		cmp r6, #0x0
		beq Poke_decrypt
		b Poke_encrypt

new_store_addr: .word 0x0203f400

Poke_encrypt:	ldr r4, var_8004
		ldrh r4, [r4, #0x0]
		ldr r5, Party_addr
		cmp r4, #0x6
		blt new_location
		add r6, r7, #0x0
		add r6, #0x78
		ldr r4, [r6, #0x0]
new_location:	mov r6, #0x64
		mul r4, r6
		add r5, r5, r4
		mov r4, #0x0
		add r6, r7, #0x0
		add r6, #0x20
		mov r0, #0x0

checksum:	ldrh r1, [r6, #0x0]
		add r4, r1, r4
		add r6, #0x2
		add r0, #0x2
		cmp r0, #0x30
		blt checksum
		lsl r4, r4, #0x10
		lsr r4, r4, #0x10
		strh r4, [r7, #0x1c]
		ldr r4, [r7, #0x0]
		ldr r6, [r7, #0x4]
		eor r6, r4
		add r3, r5, #0x0
		mov r2, #0x64

store:		ldr r0, [r7, #0x0]
		str r0, [r3, #0x0]
		add r7, #0x4
		add r3, #0x4
		sub r2, #0x4
		cmp r2, #0x0
		bne store

		mov r2, #0xc
		add r3, r5, #0x0
		add r3, #0x20
encrypt:	ldr r0, [r3, #0x0]
		eor r0, r6
		str r0, [r3, #0x0]
		add r3, #0x4
		sub r2, #0x1
		cmp r2, #0x0
		bne encrypt
		sub r7, #0x64
		mov r0, #0x0
		mov r1, #0x0
clean:		Str r0, [r7, #0x0] 
		add r1, #0x4
		add r7, #0x4
		cmp r1, #0x7c
		bne clean
		pop {r1-r7, pc}
.hword 0x0000
var_8004: 	.word 0x020370c0
Party_addr: 	.word 0x02024284


Poke_decrypt:	ldr r4, var2_8004
		ldrH r4, [r4, #0x0]
		ldr r5, Party_addr2
		cmp r4, #0x5
		bhi error
		add r6, r7, #0x0
		add r6, #0x78
		strb r4, [r6, #0x0]
		mov r6, #0x64
		mul r4, r6
		add r5, r5, r4
		add r4, r5, #0x0
		add r3, r7, #0x0

read:		ldr r0, [r4, #0x0]
		str r0, [r3, #0x0]
		add r4, #0x4
		add r3, #0x4
		sub r6, #0x4
		cmp r6, #0x0
		bne read

		ldr r6, [r7, #0x0]
		ldr r5, [r7, #0x4]
		eor r5, r6
		add r6, r7, #0x0
		add r6, #0x20
		mov r4, #0xc

decrypt:	ldr r0, [r6, #0x0]
		eor r0, r5
		str r0, [r6, #0x0]
		add r6, #0x4
		sub r4, #0x1
		cmp r4, #0x0
		bne decrypt

		mov r4, #0xc0
		lsl r4, r4, #0x18
		ldr r5, [r7, #0x0]
		cmp r5, r4
		blo less_c0
		sub r5, r5, r4
less_c0:	lsr r4, r4, #0x1
		cmp r5, r4
		blo less_60
		sub r5, r5, r4
less_60:	add r0, r5, #0x0
		mov r1, #0x18
		swi #0x6
		mov r6, #0x20
		add r6, r7, r6	
		mov r5, #0x2c
		add r5, r7, r5	
		mov r4, #0x38
		add r4, r7, r4
		mov r3, #0x44
		add r3, r7, r3
		
		ldr r2, decrypt_values
		mov r0, #0xA
		mul r1, r0
		add r7, #0x64
		add r2, r2, r1
		mov pc, r2
error: 		mov r0, #0x1
 		pop {r1-r7, pc}
Party_addr2: 	.word 0x02024284
var2_8004: 	.word 0x020370c0
decrypt_values: .word 0x00000000

C0:	str r6, [r7, #0x0] 
	str r5, [r7, #0x4]
	str r4, [r7, #0x8]
	str r3, [r7, #0xc]	

	b nd
C1:	str r6, [r7, #0X0] 
	str r5, [r7, #0X4]
	str r4, [r7, #0XC]
	str r3, [r7, #0X8]
	b nd
C2:	str r6, [r7, #0X0] 
	str r5, [r7, #0X8]
	str r4, [r7, #0X4]
	str r3, [r7, #0XC]
	b nd
C3:	str r6, [r7, #0X0] 
	str r5, [r7, #0X8]
	str r4, [r7, #0XC]
	str r3, [r7, #0X4]
	b nd
C4:	str r6, [r7, #0X0] 
	str r5, [r7, #0XC]
	str r4, [r7, #0X4]
	str r3, [r7, #0X8]
	b nd
C5:	str r6, [r7, #0X0] 
	str r5, [r7, #0XC]
	str r4, [r7, #0X8]
	str r3, [r7, #0X4]
	b nd

C6:	str r6, [r7, #0X4] 
	str r5, [r7, #0X0]
	str r4, [r7, #0X8]
	str r3, [r7, #0XC]	

	b nd
C7:	str r6, [r7, #0X4] 
	str r5, [r7, #0X0]
	str r4, [r7, #0XC]
	str r3, [r7, #0X8]
	b nd
C8:	str r6, [r7, #0X4] 
	str r5, [r7, #0X8]
	str r4, [r7, #0X0]
	str r3, [r7, #0XC]
	b nd
C9:	str r6, [r7, #0X4] 
	str r5, [r7, #0X8]
	str r4, [r7, #0XC]
	str r3, [r7, #0X0]
	b nd
CA:	str r6, [r7, #0X4] 
	str r5, [r7, #0XC]
	str r4, [r7, #0X0]
	str r3, [r7, #0X8]
	b nd
Cb:	str r6, [r7, #0X4] 
	str r5, [r7, #0XC]
	str r4, [r7, #0X8]
	str r3, [r7, #0X0]
	b nd

Cc:	str r6, [r7, #0X8] 
	str r5, [r7, #0X0]
	str r4, [r7, #0X4]
	str r3, [r7, #0XC]	

	b nd
Cd:	str r6, [r7, #0X8] 
	str r5, [r7, #0X0]
	str r4, [r7, #0XC]
	str r3, [r7, #0X4]
	b nd
Ce:	str r6, [r7, #0X8] 
	str r5, [r7, #0X4]
	str r4, [r7, #0X0]
	str r3, [r7, #0XC]
	b nd
Cf:	str r6, [r7, #0X8] 
	str r5, [r7, #0X4]
	str r4, [r7, #0XC]
	str r3, [r7, #0X0]
	b nd
C10:	str r6, [r7, #0X8] 
	str r5, [r7, #0XC]
	str r4, [r7, #0X0]
	str r3, [r7, #0X4]
	b nd
C11:	str r6, [r7, #0X8] 
	str r5, [r7, #0XC]
	str r4, [r7, #0X4]
	str r3, [r7, #0X0]
	b nd

C12:	str r6, [r7, #0XC] 
	str r5, [r7, #0X0]
	str r4, [r7, #0X4]
	str r3, [r7, #0X8]	

	b nd
C13:	str r6, [r7, #0XC] 
	str r5, [r7, #0X0]
	str r4, [r7, #0X8]
	str r3, [r7, #0X4]
	b nd
C14:	str r6, [r7, #0XC] 
	str r5, [r7, #0X4]
	str r4, [r7, #0X0]
	str r3, [r7, #0X8]
	b nd
C15:	str r6, [r7, #0XC] 
	str r5, [r7, #0X4]
	str r4, [r7, #0X8]
	str r3, [r7, #0X0]
	b nd
C16:	str r6, [r7, #0XC] 
	str r5, [r7, #0X8]
	str r4, [r7, #0X0]
	str r3, [r7, #0X4]
	b nd
C17:	str r6, [r7, #0XC] 
	str r5, [r7, #0X8]
	str r4, [r7, #0X4]
	str r3, [r7, #0X0]
nd: 	mov r0, #0x0
    	pop {r1-r7, pc}

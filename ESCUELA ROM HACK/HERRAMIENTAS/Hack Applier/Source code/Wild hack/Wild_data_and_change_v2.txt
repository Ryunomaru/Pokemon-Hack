.align 2
.thumb

/*This code is supposed to replace the very small and
insignificant code at 0x08082b48 in order to allow the
introduction of a small variation to the wild_poke data
without the need to repoint all tables to the RAM.
It can only change one poke at the time, by messing with
all of them.*/

/*code to change at 0x08082b48
get_to_new:	ldr r0, new_code
		bx r0
new_code: .word 0x00000000

that is

00 48 00 47 pointer
*/
Replacement:	push {r3-r7}
		ldr r2, flags
		ldrb r1, [r2]
		mov r7, #0x20
		and r7, r1
		cmp r7, #0x0
		beq old_ways
		ldrb r1, [r2, #0x6]
		pop {r3-r7}
		add r0, r7, #0x0
		push {r3-r7}  
		bl check_wild_data
		cmp r1, #0x1
		bne old_ways
cont:		ldrb r6, [r2, #0x3]
		ldrh r5, [r2, #0x4]
		ldr r4, [r2, #0x8]
		ldr r0, rand_key
		ldr r0, [r0]
		mov r1, #0x1
		lsl r1, r1, #0x10
		sub r1, #0x1
		swi 0x6
		lsl r1, r1, #0x10
		lsr r1, r1, #0x10
		cmp r5, r1
		blt old_ways
		mov r1, #0x1
		lsl r1, r1, #0x10		
		cmp r4, r1
		bge make_specific
		b make_generic
.hword 0x0000
flags: .word 0x0203f480
rand_key: .word 0x03005000
.hword 0x0000
make_generic:	lsl r4, r4, #0x10
		lsr r0, r4, #0x10
		cmp r6, #0x0
		beq done_generic
		sub r6, #0x1
		strb r6, [r2, #0x3] 
		cmp r6, #0x0
		bne done_generic
		mov r7, #0x20
		mvn r7, r7
		ldrb r4, [r2]
		and r4, r7
		strb r4, [r2]
		mov r4, #0x0
		ldrb r1, [r2, #0x7]
		strh r4, [r2, #0x4]
		str r4, [r2, #0x8]
		strh r4, [r2, #0x6]
done_generic:	pop {r3-r7}
		cmp r1, #0x64
		bgt no_replace_lvl
		cmp r1, #0x0
		bne replace_lvl
no_replace_lvl:	add r1, r5, #0x0
replace_lvl:	add r2, r6, #0x0
		b get_out

old_ways:	b real_old_ways
	
make_specific:	lsr r0, r4, #0x18
		cmp r0, #0x2
		beq correct
		cmp r0, #0x3
		beq correct
		cmp r0, #0x8
		beq correct
		cmp r0, #0x9
		beq correct
		b real_old_ways
correct:	mov r1, #0x0
		ldr r5, enemy_data
copy_loop:	ldr r0, [r4]
		str r0, [r5]
		add r5, #0x4
		add r4, #0x4
		add r1, #0x4
		cmp r1, #0x64
		blt copy_loop
		mov r2, #0x20
		mvn r2, r2
		ldrb r4, [r2]
		and r4, r2
		strb r4, [r2]
		mov r4, #0x0
		strh r4, [r2, #0x4]
		str r4, [r2, #0x8]
		strh r4, [r2, #0x6]
		pop {r3-r7}
get_out_2:	ldr r6, make_wild_poke2
		add r6, #0x4
		bx r6
enemy_data: .word 0x0202402c
make_wild_poke2: .word 0x08082b53

real_old_ways:	pop {r3-r7}
		ldr r0, [r7, #0x4]
		add r0, r4, r0
		ldrh r0, [r0, #0x2]
		add r1, r5, #0x0
		add r2, r6, #0x0
get_out:	ldr r6, make_wild_poke
		bx r6

make_wild_poke: .word 0x08082b53


/*this code is meant to replace 0x08082af4, start of the 
data collection for the wild pokemon routine.

changer:	ldr r7, new_addr
		bx r7  
new_addr: .word 0x00000000

that is

00 4f 38 47 (pointer + offset)
*/
Data_switch:	lsl r2, r2, #0x18
		lsr r2, r2, #0x18
		mov r8, r2
		ldr r2, flags2
		mov r6, #0x10
		ldrb r5, [r2]
		and r5, r6
		cmp r5, #0x0
		beq old_code
		add r7, r1, #0x0
		bl check_map
		cmp r1, #0x0
		beq old_code_1
		lsl r1, r1, #0x2
		add r1, #0x8
		add r5, r2, r1
		ldr r5, [r5]
		cmp r5, #0x0
		beq old_code_1		
		add r0, r5, #0x0
old_code_1:	add r1, r7, #0x0
old_code:	add r7, r0, #0x0
		lsl r1, r1, #0x18
		lsr r1, r1, #0x18
		add r0, r1, #0x0
		mov r2, r8
		ldr r6, end_code
		bx r6
.hword 0x0000
flags2: .word 0x0203f480
end_code: .word 0x08082b01


/*recieves r0 as the original wild_data
returns r1 as the data_slot*/

check_wild_data: push {r2-r7, lr}
		 cmp r1, #0x0
		 beq end_c_W_d
		 cmp r1, #0xf
		 beq end_c_W_d
		 add r6, r1, #0x0
		 ldrb r5, [r2]
		 mov r7, #0x10
		 and r7, r5
		 cmp r7, #0x0
		 beq correct_data

check_grass:	add r4, r2, #0x0
		add r4, #0xc
		mov r5, #0x1
		and r5, r6
		cmp r5, #0x1
		bne check_water  
		ldr r5, [r4]
		cmp r5, r0
		beq end_c_W_d
		mov r1, #0x0
		b not_real

check_water:	add r4, #0x4
		mov r5, #0x2
		and r5, r6
		cmp r5, #0x2
		bne check_water  
		b load_check

check_tree:	add r4, #0x4
		mov r5, #0x4
		and r5, r6
		cmp r5, #0x4
		bne check_water  
		b load_check

check_fish:	add r4, #0x4
		mov r5, #0x8
		and r5, r6
		cmp r5, #0x8
		bne check_water  
load_check:	ldr r5, [r4]
		cmp r5, r0
		beq end_c_W_d
		mov r1, #0x0
		b not_real

correct_data:	bl check_map
		cmp r1, #0x0
		beq not_real
		sub r1, #0x1
		mov r5, #0x1
		lsl r5, r5, r1
		and r5, r6
		cmp r5, #0x0
		beq not_real

end_c_W_d:	mov r1, #0x1
not_real:	pop {r2-r7, pc}	



check_map:	push {r2-r5, lr}
		ldr r4, map_data
		ldr r4, [r4]
		ldr r5, wild_table
		ldr r5, [r5]
		ldrh r4, [r4, #0x4]
search_loop:	ldrh r3, [r5]
		cmp r4, r3
		beq end_search
		add r5, #0x14
		b search_loop
.hword 0x0000
map_data: .word 0x03005008
wild_table: .word 0x08082990		

end_search: 	mov r1, #0x1
slot_find:	add r5, #0x4
		ldr r4, [r5]
		cmp r0, r4
		beq right_data
		add r1, #0x1
		cmp r1, #0x5
		bne slot_find
		mov r1, #0x0
right_data:	pop {r2-r5, pc}

.align 2
.thumb

/*must edit out at 080828fa, after the push
change_lv:	ldr r5, new_lvl_call
		bx r5

new_lvl_call: .word 0x00000000

or
01 4d 28 47 00 00 pointer
*/
/*this function call replaces the old poke-level get.
if a flag in variable 0x4051 (old Old_man_fainted script)
is set, a number of situations may occurr:
0 -> nothing out of the ordinary happens, wild poke are 
     always what they were written.
The var is divided in two halves. the lower is the parameter
given, usually a level difference or a signed byte number.
the lower half has a key of its own.
0 -> nothing, even if the other half has something. an "off"
     switch that doesn't damage anything
1 -> get highest level in party, wild pokemon will be that 
     lv
2 -> get highest level in party, wild pokemon will be that 
     lv plus a small number kept at the lower part. always
     smaller than 101.
3 -> get highest level in party, wild pokemon will be that 
     lv less a small number kept at the lower part. always
     bigger than 1.
4 -> get lowest level in party, wild pokemon will be that 
     lv
5 -> get lowest level in party, wild pokemon will be that 
     lv plus a small number kept at the lower part. always
     smaller than 101.
6 -> get lowest level in party, wild pokemon will be that 
     lv less a small number kept at the lower part. always
     bigger than 1. 
7 -> makes a weighted average of your party level, and 
     wild pokemon will be that lvl.
8 -> makes a weighted average of your party level, and 
     wild pokemon will be that lvl plus a small number.
     same rule as the rest
9 -> makes a weighted average of your party level, and 
     wild pokemon will be that lvl minus a small number.
     same rule as the rest.
a -> calculates a random number between max and min
b -> calculates a random number between max + var and
     max - var
c -> calculates a random number between min + var and
     min - var
d -> calculates a random number between avrg + var and
     avrg - var
f -> simplest of the bunch, makes the wild pokemon be the
     level you stored.

For eficiency and safety reasons, with the exception of 0x00yy,
all the algorithms are performed at once.*/

make_wild_lvl:	push {r6,r7}
		push {r0}
		ldr r0, var_4051
		bl call_var_decrypt
		ldrh r0, [r0]
		lsl r1, r0, #0x14
		lsr r1, r1, #0x1c
		cmp r1, #0x0
		beq old_school
		cmp r1, #0xf
		beq that_lvl
		add r6, r0, #0x0   /*r6 = variable content*/
		ldr r5, poke_number
		ldrb r5, [r5]	   
		ldr r7, party_addr 
		add r0, r5, #0x0 /*from this point on, r0 = remaining*/
		mov r1, #0x0	/*r1 = the biggest*/
		mov r2, #0xff	/*r2 = smallest*/
		mov r3, #0x0	/*r3 = sum of all levels*/
calculoop:	ldrb r4, [r7]	/*r4 = temp*/
		cmp r4, r1
		blt smallest
		add r1, r4, #0x0
smallest:	cmp r4, r2
		bgt just_add
		add r2, r4, #0x0
just_add:	add r3, r4, r3
		sub r0, #0x1
		add r7, #0x64
		cmp r0, #0x0
		bgt calculoop
		lsl r0, r6, #0x14
		lsr r0, r0, #0x1c
		cmp r0, #0x1
		beq biggest_only
		cmp r0, #0x2
		beq biggest_plus
		cmp r0, #0x3		
		beq biggest_minus
		cmp r0, #0x4
		beq smallest_only
		cmp r0, #0x5
		beq smallest_plus
		cmp r0, #0x6		
		beq smallest_minus
		cmp r0, #0x7
		beq average_only
		cmp r0, #0x8
		beq average_plus
		cmp r0, #0x9		
		beq average_minus
		cmp r0, #0xa
		beq random_min_max
		cmp r0, #0xb
		beq random_max
		cmp r0, #0xc
		beq random_min
		cmp r0, #0xd
		beq random_avgr
		b old_school
.hword 0x0000
var_4051: .word 0x00004051
poke_number: .word 0x02024029
party_addr: .word 0x020242d8

old_school: 	pop {r4}
		pop {r6,r7}
		ldrb r0, [r4, #1]
		ldrb r1, [r4]
		cmp r0, r1
		blt exchange_lv
		add r5, r1, #0x0
		b make_a_lvl
exchange_lv:	add r5, r0, #0x0
		add r0, r1, #0x0
		b make_a_lvl

that_lvl:	lsl r0, r0, #0x18
		lsr r0, r0, #0x18
		pop {r6}
		pop {r6,r7}
		pop {r4,r5,pc}

biggest_only: 	pop {r0}
		pop {r6,r7}
		add r0, r1, #0x0
		pop {r4,r5,pc}	

biggest_plus:	pop {r0}
		add r0, r1, #0x0
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		add r0, r0, r1
		cmp r0, #0x64
		bgt error_check_b
		pop {r6,r7}
		pop {r4,r5,pc}
				
biggest_minus:	pop {r0}
		add r0, r1, #0x0
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		sub r0, r0, r1
		cmp r0, #0x1
		blt error_check_s
		pop {r6,r7}
		pop {r4,r5,pc}
		
smallest_only:	pop {r0}
		pop {r6,r7}
		add r0, r2, #0x0
		pop {r4,r5,pc}

smallest_plus:	pop {r0}
		add r0, r2, #0x0
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		add r0, r0, r1
		cmp r0, #0x64
		bgt error_check_b
		pop {r6,r7}
		pop {r4,r5,pc}

smallest_minus: pop {r0}
		add r0, r2, #0x0
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		sub r0, r0, r1
		cmp r0, #0x1
		blt error_check_s
		pop {r6,r7}
		pop {r4,r5,pc}

average_only:	pop {r0}
		pop {r6,r7}
		add r0, r3, #0x0
		add r1, r5, #0x0
		swi #0x6
		pop {r4,r5,pc}

average_plus:	pop {r0}
		add r0, r3, #0x0
		add r1, r5, #0x0
		swi #0x6
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		add r0, r0, r1
		cmp r0, #0x64
		bgt error_check_b
		pop {r6,r7}
		pop {r4,r5,pc}

average_minus:	pop {r0}
		add r0, r3, #0x0
		add r1, r5, #0x0
		swi #0x6
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		sub r0, r0, r1
		cmp r0, #0x1
		blt error_check_s
		pop {r6,r7}
		pop {r4,r5,pc}

random_min_max:	pop {r0}
		pop {r6,r7}
		add r0, r1, #0x0
		add r5, r2, #0x0
		b make_a_lvl	

random_max:	pop {r0}
		add r0, r1, #0x0
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		sub r5, r0, r1
		add r0, r0, r1
		pop {r6,r7}
		b make_a_lvl

random_min:	pop {r0}
		add r0, r2, #0x0
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		sub r5, r0, r1
		add r0, r0, r1
		pop {r6,r7}
		b make_a_lvl

random_avgr:	pop {r0}
		add r0, r3, #0x0
		add r1, r5, #0x0
		swi #0x6
		lsl r1, r6, #0x18
		lsr r1, r1, #0x18
		sub r5, r0, r1
		add r0, r0, r1
		pop {r6,r7}
		b make_a_lvl

make_a_lvl:	ldr r4, lvl_make
		bx r4
error_check_b:	mov r0, #0x64
		pop {r6,r7}
		pop {r4,r5,pc}

error_check_s:  mov r0, #0x1
		pop {r6,r7}
		pop {r4,r5,pc}
.hword 0x0000
lvl_make: .word 0x0808290d


call_var_decrypt: ldr r4, var_decrypt
		  bx r4
var_decrypt:	.word 0x0806E455







